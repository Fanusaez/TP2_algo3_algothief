"Version 3"

@startuml

/' ********** CLASES ********** '/

class AlgoThief{
-cantidadArrestos

+ iniciarJuego()
+ actualizarHora(int horas)
+ mostrarOpcionesViaje()
+ entrarAEdificio()
+ capturaDelicuente()
+ viajarA(destino)
}

class Mapa{
-ciudadesRecorridasPorDelicuente
-ciudadesNoRecorridasPorDelincuente

+ mostrarOpcionesViaje()
+ crearCiudades(string nombreArchivo)
+ distribuirCiudadesRecorridasNoRecorridas(cantidadCiudades: int)
+ crearPistasCiudades(listaDePistasDelincuente: List<List<String>> )
}

abstract class Policia{


+ entrarAEdificio(indiceEdificio)
+ viajarA(destino) : int
{abstract} +ascender(cantidadArrestos)

}

class PoliciaNovato{
-velocidad
-cantidadNecesariaParaAscender
+ascender(cantidadArrestos)
}

class PoliciaDetective{
-velocidad
-cantidadNecesariaParaAscender
+ascender(cantidadArrestos)
}

class PoliciaInvestigador{
-velocidad
-cantidadNecesariaParaAscender
+ascender(cantidadArrestos)
}

class PoliciaSargento{
-velocidad
-cantidadNecesariaParaAscender
+ascender(cantidadArrestos)
}

class Delincuente{
-sexo
-hobby
-colorPelo
-vehiculo
-senia

+generarPista(cantidadArrestos):List<List<String>>
+atacar()
}

/'
class NPC{

}
'/

class Viaje{

{static} +calcularTiempo(desde, hasta, velocidad) : (int horas)
}


class Ciudad{
-poblacion:string
-bandera:string
-moneda:string
-idioma:string
-contadorVisitaEdificio: int

+entrarAEdificio(indiceEdificio)
+ generarPistaCiudad(ciudadSiguiente: Ciudad, listaDePistasDelincuenteCiudad: List<String>)
}

class Horario{
-dia
-hora

+actualizarHora(cantidad)
}

interface Edificio{

+ MostrarPista()
+ {abstract} generarPistaEdificio(ciudadSiguiente,string)
}

class Banco{
-pista
+ generarPistaEdificio(ciudadSiguiente,string)
}

class Puerto{
-pista
+ generarPistaEdificio(ciudadSiguiente,string)
}

class Museo{
-pista
+ generarPistaEdificio(ciudadSiguiente,string)
}

class Computadora{
-sexosPosibles : list
-hobbysPosibles : list
-vehiculosPosibles : list
-colorPeloPosibles : list
-seniasPosibles : list
-listaDelincuentes : list

+seleccionarOpcion()
+buscarSospechosos()
-emitirOrdenArresto()
}

interface Arma{
+herirJugador()
}

class ArmaBlanca{
+herirJugador()
}

class ArmaDeFuego{
+herirJugador()
}

/' ********** DEPENDENCIAS ********** '/

AlgoThief --> Policia
AlgoThief --> Horario
AlgoThief --> Delincuente
AlgoThief --> Mapa
AlgoThief --> Computadora

Mapa "1" --> "*" Ciudad

Museo ..|> Edificio
Banco ..|> Edificio
Puerto ..|> Edificio

Policia --> Ciudad
Policia --> Mapa
Policia --> Viaje
PoliciaNovato ..|> Policia
PoliciaDetective ..|> Policia
PoliciaSargento ..|> Policia
PoliciaInvestigador ..|> Policia

Delincuente --> Arma

ArmaBlanca ..|> Arma
ArmaDeFuego ..|> Arma


Ciudad "1" --> "3" Edificio

/' ********** NOTAS ********** '/


note left of PoliciaNovato::ascender
if cantidadArrestos = cantidadNecesariaParaAscender:
   return PoliciaDetective new
return self
end note



/'note right of Delincuente
La creacion de un delincuente depende
del valor de un objeto, y el valor de
un objeto depende del grado del policia.
end note'/

/'
public enum casosDeAscenso
{
    0, 5, 10, 20
}

if cantidadArrestos in casosDeAscenso:
    POLICIA = POLICIA.ASCENDER()

'/
/'
note right of clases.AlgoThief::entrarAEdificio
entrarAEdificio():
    if delincuente.ciudad == policia.ciudad:
        horario.actualizarHora(delincuente.atacar())
end note
'/

@enduml

polcia.estaEnCiudadDelincuente(delincuente)

en estaEnCiudadDelincuente:
    if delincuente.estaAca(ciudadActual)




